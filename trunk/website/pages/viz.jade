script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/mbostock/d3.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/mbostock/d3.layout.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/mbostock/lib/jquery/jquery.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/mbostock/lib/jquery/jquery.min.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/mbostock/d3.geom.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/deepCopy.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/ModelGraph.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/Trees.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/Sunbursts.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/Graph.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/GraphToD3Graph.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/edge_data.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/node_data.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/displayInfo.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/force.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/VisualizationRegister.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/Visualization.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/options/SizeFunction.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/options/ColorFunction.js")
script(type="text/javascript", src="http://atelier.inf.usi.ch/~babazadm/testnode/js/Analysis.js")

script(type="text/javascript")
	
	var subclasses = "superclassOf"; var classType = "Class";
	var methods = "methods"; 
	var classes = "classes";
	var attributes = "attributes";
	var namespaces = "namespaces"; packageType = "Namespace";
	var register = new VisualizationsRegister();
	var analysis = new Array();
	var currentDisplayedViz;
	var currentAnalysis;

	analysis.push(inheritanceHierarchyAnalysis);
	analysis.push(callGraph);
	analysis.push(revisionRelatedChanges);
	analysis.push(bugAuthorRelation);
	analysis.push(entityAuthorRelation);
	analysis.push(genericGraph);
	
	function filterNodes (element, relation, graph) {
		var elementType = element;
		var relationName = relation;
		return function (graph) {                                                 
			var c = [];
			var nodes = graph.getNodesByType(elementType);
			
			for(var n in nodes) {
				var node = nodes[n];
				c.push( graph.getSubtreeByRelationName(relationName, node.uniqueId) );
			}
			return c;
		}
	}
	
	function filterNodesAndEdges(relationName, nodeType) {
		return function (graph) {
			var edges = owl.deepCopy(graph.getOneToOneEdges(relationName));
			var nodes = owl.deepCopy(graph.getNodesByType(nodeType));
			return [toD3Graph(nodes, edges)];
		}
	}

	function getInvocationSelector() {
		var relationName = "invokingMethods";
			var nodeType = "Method";	
			
			var opt = {
				maxEdges : 200,
				currentEdges: 0,	
				removeUnconnected : true,
				selectRelation : function(rel) { return rel == relationName; },
				selectNode : function(node) {   return node.properties.ElementType == nodeType; },
				selectEdge : function(nodeFrom, nodeTo) { 
					var ret = (this.currentEdges <= this.maxEdges); 
					if(ret)  
						this.currentEdges++; 
					return ret 
				}
			};
		return opt;
	}
	
	
	
	function plotGraph() {
		var graph = genesis.Graph.create(node_data.nodes, edge_data.edges);
		var opt = getInvocationSelector();
		var selection = graph.getSelection(opt);
		var subGraph = toD3Graph(selection.nodes, concat(selection.edges));
		forceDirectedGraph(subGraph.nodes, subGraph.edges);
	}
	
	
	function getTreeFromRelation(relationName, elementType) {
		var graph = genesis.Graph.create(node_data.nodes, edge_data.edges);
		return toD3Trees(graph, relationName, elementType);
	}
	
	var projects = [];
	projects.push({
		"!{vizJson.projectName}" : {
			totalRevisions : [!{vizJson.revisions}],
			//heldRevisions stores an object of the form {revisionNumber: nmbr, graph: graph}
			heldRevisions : [],
			history : undefined,
			getRevision : function(rev){
					for(var i = 0; i < heldRevisions.length; i++){
						if(heldRevisions[i].revisionNumber){
							return heldRevisions[i];
						}
					}
					$.ajax({
							url: 'http://127.0.0.1:1234/get_data/'+ "!{vizJson.projectName}" +'/' + rev,
							error: function (data ){
								alert("Some problem happened: " + JSON.stringify(data));
							},
							success: function( data ) {
								var nodes = data.nodes;
								var edges = data.edges;
								var graph = genesis.Graph.create(nodes,edges);
								var r = {"revisionNumber" : rev,
										"graph" : graph,
									};
								heldRevisions.push(r);
								return r;
							}
					});
				},
			getHistory : function(){
					if(this.history == undefined){
						$.ajax({
							url: 'http://127.0.0.1:1234/get_data/'+ "!{vizJson.projectName}" +'/history',
							error: function (data ){
								alert("Some problem happened: " + JSON.stringify(data));
							},
							success: function( data ) {
								var h = data.history;
								this.history = h;
								return h;
							}
						});
					}
					else {
						return this.history;
					}
				},
		}
	});

	
#topmenu
	ul(id="menu-nav")
		li(class="two")
			a(class="topnav", target="_top", href="#", onclick="clickProjects()") Projects
		li(class="two")
			a(class="topnav", target="_top", href="#", onclick="clickNew()") New Project
		li(class="logout")
			a(class="topnav", target="_top", href="/logout") Logout


#setOptions
	span(style="float: right", onclick="document.getElementById('showOptions').style.display = 'block'; document.getElementById('setOptions').style.display = 'none';") X
	#nodesOptions
	#colorOptions

#treename
#monitor

span(id="showOptions", onclick="document.getElementById('setOptions').style.display = 'block'; document.getElementById('showOptions').style.display = 'none';") Show Options

div(class="Block", id="vizContainer")
	#chart(class="Block Right", style="overflow:visible")
	
	
	#roots(class="Block Left List")
	
	script
		
		function graphTest() {
			var graph = genesis.Graph.create(!{JSON.stringify(nodes)}, !{JSON.stringify(edges)});
			var edges = graph.edges;
			var inhTree = graph.getSubtreeByRelationName("superclassOf", -2061828931);
			
			var c = [];
			for(var n in graph.nodes) {
				var node = graph.nodes[n];
				c.push( graph.getSubtreeByRelationName("superclassOf", node.uniqueId) )
			}
			return { name: "Inheritance Tree", children: c };
		}
		
		function update () {
			document.getElementById("slider_controls").style.display = "block";
		}
		
		function showValue(newValue) {
			//document.getElementById("range").innerHTML=newValue;
		}
		
		function play(){
			var src = document.getElementById("playbutton").src;
			var file = src.substring(src.lastIndexOf("/")+1, src.length);
			
			if(file == "play.png"){
				document.getElementById("playbutton").src="img/pause.png";
			}else if(file =="pause.png"){
				document.getElementById("playbutton").src = "img/play.png";
			}
		}
		//var variousGraphs = graphTest();
		//roots(variousGraphs);
		
		/*$.ajax({
			url: 'http://127.0.0.1:4321/get_data/Argo/11',
			success: function( data ) {
				var nodes = data.nodes;
				var edges = data.edges;
			}
		});*/
		
		var vizs = "<ul>";
		for(var i = 0; i < analysis.length; i++){
			//adds directly a hook to get the version by adding as revision number the last element of the array of revisions
			vizs += "<li onclick='getVersion(\\""+analysis[i].name+"\\", \\"!{vizJson.projectName}\\", !{vizJson.revisions[vizJson.revisions.length - 1]})'>" + analysis[i].name + "</li>"
		}
		//getVersion(" + analysis[i].name + ", \\"!{vizJson.projectName}\\", \\"!{vizJson.revisions[vizJson.revisions.length - 1]}\\")
		vizs += "</ul>"
		document.getElementById("roots").innerHTML = vizs;
		
		function getVersion(analysisName, projectName, revisionNumber){
			$.ajax({
				url: '/get_data/'+ projectName +'/' + revisionNumber,
				error: function (data ){
					alert("error : " + JSON.stringify(data));
				},
				success: function( data ) {
					var nodes = data.nodes;
					var edges = data.edges;
					
					//DO SOMETHING TO VISUALIZE
					var an = {};
					for(var i = 0; i < analysis.length; i++){
						if(analysis[i].name == analysisName){
							an = analysis[i];
							break;
						}
					}
					var possibleVizs = register.getVisualizations([an]);
					var graph = genesis.Graph.create(nodes,edges);
					currentAnalysis = an;
					
					
					var vis = possibleVizs[0];
					vis.options["filter"] = filterNodes(an.options.elementType, an.options.relation);
					vis.initializeFromGraph(graph);
					//fill the list & setup global variabl
					currentDisplayedVis = vis;
					addCandidatesToElement(vis);
					
				}
			}); 
		}
		
		//candidates is an array of candidates for a choosen visualization 
		function addCandidatesToElement(vis){
			//fill the options
			var opts = "Nodes Options <br/> <ul>";
			var opList = getOptions(currentAnalysis, currentDisplayedVis);
			opList = opList.nodes.sizeFunction;
			for(var i = 0; i < opList.length; i++){
				opts += "<li onclick=''>" + opList[i].name + "</li>"
			}
			opts += "</ul>"
			document.getElementById('nodesOptions').innerHTML = opts;
			
			var can = "<ul>"
			var candidates = vis.candidates();
			for(var i = 0; i < candidates.length; i++){
				can += "<li onclick='displayGraphFromList(" + i + ");'>" + candidates[i].name + "</li>"
			}
			can += "</ul>";
			document.getElementById('roots').innerHTML = can;
		}
		
		//displays the chosen candidate's view
		function displayGraphFromList(candidate){
			var cans = currentDisplayedVis.candidates();
			currentDisplayedVis.visualize(cans[candidate], "#chart");
			//alert(JSON.stringify(getOptions(currentAnalysis, currentDisplayedVis)));
		}
		
		//getOptions(analysis, vis)
		
		register.addVisualization(TreeVisualization);
		register.addVisualization(GraphVisualization);
		register.addVisualization(SunburstVisualization);
		document.getElementById('setOptions').style.display = 'none';
		
		function clickProjects(){
			document.getElementById("projects").style.display = "block";
			document.getElementById("addProject").style.display = "none";
			document.getElementById('chart').style.display = 'none';
			document.getElementById('roots').style.display = 'none';
		}
		function clickNew(){
			document.getElementById("addProject").style.display = "block";
			document.getElementById("projects").style.display = "none";
			document.getElementById('chart').style.display = 'none';
			document.getElementById('roots').style.display = 'none';
		}
